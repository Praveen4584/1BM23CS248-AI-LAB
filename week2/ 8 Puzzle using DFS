def is_goal(state, goal):
    return state == goal

def get_neighbors(state):
    neighbors = []
    zero_pos = state.index(0)
    row, col = divmod(zero_pos, 3)

    moves = {
        'up': (row - 1, col),
        'down': (row + 1, col),
        'left': (row, col - 1),
        'right': (row, col + 1)
    }

    for r, c in moves.values():
        if 0 <= r < 3 and 0 <= c < 3:
            new_pos = r * 3 + c
            new_state = list(state)
            # Swap zero with the adjacent tile
            new_state[zero_pos], new_state[new_pos] = new_state[new_pos], new_state[zero_pos]
            neighbors.append(tuple(new_state))
    return neighbors

def dfs(start_state, goal_state):
    stack = [(start_state, [start_state])]  # Stack holds tuples: (state, path)
    visited = set()

    while stack:
        current_state, path = stack.pop()

        if is_goal(current_state, goal_state):
            return path  # Solution found

        visited.add(current_state)

        for neighbor in get_neighbors(current_state):
            if neighbor not in visited:
                stack.append((neighbor, path + [neighbor]))

    return None  

start_state = (1, 2, 3,
               4, 0, 6,
               7, 5, 8)

goal_state = (1, 2, 3,
              4, 5, 6,
              7, 8, 0)

solution = dfs(start_state, goal_state)

if solution:
    print(f"Solution found in {len(solution) - 1} moves:")
    for state in solution:
        print(state[0:3])
        print(state[3:6])
        print(state[6:9])
        print()
else:
    print("No solution found.")
